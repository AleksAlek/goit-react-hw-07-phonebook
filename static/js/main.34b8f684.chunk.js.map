{"version":3,"sources":["components/AddContactForm/AddContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/App/App.module.css","services/contactsSlice/contactsSlice.js","components/AddContactForm/AddContactForm.jsx","actions/filterActions.js","components/Filter/Filter.jsx","selectors/index.js","components/ContactList/ContactList.jsx","components/App/App.jsx","reducers/filterReducer.js","reducers/index.js","store.js","index.js"],"names":["module","exports","contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","getContacts","query","providesTags","addContact","mutation","newContact","url","method","body","invalidatesTags","deleteContact","contactId","useGetContactsQuery","useAddContactMutation","useDeleteContactMutation","initialState","name","number","AddContactForm","contacts","useState","contact","setContact","handleContactData","e","target","value","onSubmit","preventDefault","alert","id","shortid","generate","className","s","addForm","formLabel","formInput","type","pattern","title","required","onChange","formBtn","filterContacts","createAction","Filter","filter","setFilter","dispatch","useDispatch","filterLabel","filterInput","event","getFilter","state","globalStore","ContactList","useSelector","filteredContacts","toLowerCase","includes","contactsList","map","contactsItem","contactsName","contactsBtn","onClick","App","data","mainContainer","filterReducer","createReducer","payload","rootReducer","combineReducers","store","configureStore","reducer","middleware","getDefaultMiddleware","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34b8f684.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"addForm\":\"AddContactForm_addForm__sDRHm\",\"formLabel\":\"AddContactForm_formLabel__3Ina2\",\"formInput\":\"AddContactForm_formInput__2VVFn\",\"formBtn\":\"AddContactForm_formBtn__2C_bb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"ContactList_contactsList__3Mq17\",\"contactsItem\":\"ContactList_contactsItem__3SJYi\",\"contactsName\":\"ContactList_contactsName__E-zFv\",\"contactsBtn\":\"ContactList_contactsBtn__SionL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"Filter_filterLabel__3RsVI\",\"filterInput\":\"Filter_filterInput__17QiT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"App_mainContainer__3pQ8u\"};","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport const contactsApi = createApi({\n  reducerPath: 'contactsApi',\n  baseQuery: fetchBaseQuery({ baseUrl: 'http://localhost:4040' }),\n  tagTypes: ['Contact'],\n  endpoints: builder => ({\n    getContacts: builder.query({\n      query: () => '/contacts',\n      providesTags: ['Contact'],\n    }),\n\n    addContact: builder.mutation({\n      query: newContact => ({\n        url: '/contacts',\n        method: 'POST',\n        body: newContact,\n      }),\n      invalidatesTags: ['Contact'],\n    }),\n    deleteContact: builder.mutation({\n      query: contactId => ({\n        url: `/contacts/${contactId}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['Contact'],\n    }),\n  }),\n});\n\nexport const {\n  useGetContactsQuery,\n  useAddContactMutation,\n  useDeleteContactMutation,\n} = contactsApi;\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\nimport { useAddContactMutation } from '../../services/contactsSlice/contactsSlice';\r\nimport s from './AddContactForm.module.css';\r\n\r\nconst initialState = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nconst AddContactForm = ({ contacts }) => {\r\n  const [contact, setContact] = useState(initialState);\r\n  const [addContact] = useAddContactMutation();\r\n\r\n  const handleContactData = e =>\r\n    setContact({\r\n      ...contact,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    for (const { name } of contacts) {\r\n      if (name === contact.name) {\r\n        alert(`${name} is already in contacts`);\r\n\r\n        return;\r\n      }\r\n    }\r\n\r\n    const newContact = {\r\n      id: shortid.generate(),\r\n      name: contact.name,\r\n      number: contact.number,\r\n    };\r\n\r\n    addContact(newContact);\r\n    setContact({ name: '', number: '' });\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={s.addForm}>\r\n      <label className={s.formLabel}>\r\n        Name\r\n        <input\r\n          className={s.formInput}\r\n          value={contact.name}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={handleContactData}\r\n        />\r\n      </label>\r\n\r\n      <label className={s.formLabel}>\r\n        Number\r\n        <input\r\n          className={s.formInput}\r\n          value={contact.number}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={handleContactData}\r\n        />\r\n      </label>\r\n\r\n      <button type=\"submit\" className={s.formBtn}>\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nAddContactForm.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default AddContactForm;\r\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const filterContacts = createAction('filter/filterContacts');\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { filterContacts } from '../../actions/filterActions';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = () => {\r\n  const [filter, setFilter] = useState('');\r\n  const dispatch = useDispatch();\r\n\r\n  const handleFilter = event => {\r\n    dispatch(filterContacts(event.target.value));\r\n    setFilter(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <label className={s.filterLabel}>\r\n        Find contacts by name\r\n        <input\r\n          className={s.filterInput}\r\n          type=\"text\"\r\n          value={filter}\r\n          onChange={handleFilter}\r\n        />\r\n      </label>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","export const getFilter = state => state.globalStore.filter;\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { getFilter } from '../../selectors';\r\nimport { useDeleteContactMutation } from '../../services/contactsSlice/contactsSlice';\r\nimport s from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts }) => {\r\n  const filter = useSelector(getFilter);\r\n  const [deleteContact] = useDeleteContactMutation();\r\n\r\n  const filteredContacts = contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n\r\n  return (\r\n    <ul className={s.contactsList}>\r\n      {filteredContacts.map(({ id, name, number }) => (\r\n        <li key={id} className={s.contactsItem}>\r\n          <p className={s.contactsName}>\r\n            {name}: {number}\r\n          </p>\r\n\r\n          <button\r\n            className={s.contactsBtn}\r\n            type=\"button\"\r\n            onClick={() => deleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import React from 'react';\nimport { useGetContactsQuery } from '../../services/contactsSlice/contactsSlice';\nimport AddContactForm from '../AddContactForm/AddContactForm';\nimport Filter from '../Filter/Filter';\nimport ContactList from '../ContactList/ContactList';\nimport s from './App.module.css';\n\nconst App = () => {\n  const { data: contacts } = useGetContactsQuery(null);\n\n  return (\n    <>\n      {contacts && (\n        <div className={s.mainContainer}>\n          <h1>Phonebook</h1>\n          <AddContactForm contacts={contacts} />\n\n          <h2>Contacts</h2>\n          <Filter />\n          <ContactList contacts={contacts} />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import { createReducer } from '@reduxjs/toolkit';\nimport { filterContacts } from '../actions/filterActions';\n\nconst filterReducer = createReducer('', {\n  [filterContacts.type]: (state, { payload }) => payload,\n});\n\nexport default filterReducer;\n","import { combineReducers } from 'redux';\nimport filterReducer from './filterReducer';\n\nconst rootReducer = combineReducers({\n  filter: filterReducer,\n});\n\nexport default rootReducer;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { contactsApi } from './services';\nimport rootReducer from './reducers';\n\nconst store = configureStore({\n  reducer: {\n    globalStore: rootReducer,\n    [contactsApi.reducerPath]: contactsApi.reducer,\n  },\n  middleware: [...getDefaultMiddleware(), contactsApi.middleware],\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport store from './store';\nimport { Provider } from 'react-redux';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}